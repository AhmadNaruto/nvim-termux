return {
  -- Konfigurasi utama LSP
  'neovim/nvim-lspconfig',
  dependencies = {
    -- Instal LSP dan alat terkait secara otomatis
    { 'williamboman/mason.nvim', opts = {} },
    'williamboman/mason-lspconfig.nvim',
    'WhoIsSethDaniel/mason-tool-installer.nvim',
    { 'j-hui/fidget.nvim', opts = {} },
    'saghen/blink.cmp',
    'yioneko/nvim-vtsls',
  },
  config = function()
    -- Fungsi ini dijalankan saat LSP terhubung ke buffer
    vim.api.nvim_create_autocmd('LspAttach', {
      group = vim.api.nvim_create_augroup('kickstart-lsp-attach', { clear = true }),
      callback = function(event)
        local map = function(keys, func, desc, mode)
          mode = mode or 'n'
          if type(mode) == 'string' then
            mode = { mode }
          end
          vim.keymap.set(mode, keys, func, { buffer = event.buf, desc = 'LSP: ' .. desc })
        end

        map('grn', vim.lsp.buf.rename, '[R]e[n]amai')
        map('gra', vim.lsp.buf.code_action, '[G]oto Tindakan [K]ode', { 'n', 'x' })
        map('grr', require('telescope.builtin').lsp_references, '[G]oto [R]eferensi')
        map('gri', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementasi')
        map('grd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinisi')
        map('grD', vim.lsp.buf.declaration, '[G]oto [D]eklarasi')
        map('gO', require('telescope.builtin').lsp_document_symbols, 'Buka Simbol Dokumen')
        map('gW', require('telescope.builtin').lsp_dynamic_workspace_symbols, 'Buka Simbol Workspace')
        map('grt', require('telescope.builtin').lsp_type_definitions, '[G]oto Definisi [T]ipe')

        -- Kompatibilitas antara Neovim 0.10 dan 0.11+
        local function client_supports_method(client, method, bufnr)
          if vim.fn.has 'nvim-0.11' == 1 then
            return client:supports_method(method, bufnr)
          else
            return client.supports_method(method, { bufnr = bufnr })
          end
        end

        local client = vim.lsp.get_client_by_id(event.data.client_id)
        if client and client_supports_method(client, vim.lsp.protocol.Methods.textDocument_documentHighlight, event.buf) then
          local highlight_augroup = vim.api.nvim_create_augroup('kickstart-lsp-highlight', { clear = false })
          vim.api.nvim_create_autocmd({ 'CursorHold', 'CursorHoldI' }, {
            buffer = event.buf,
            group = highlight_augroup,
            callback = vim.lsp.buf.document_highlight,
          })
          vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
            buffer = event.buf,
            group = highlight_augroup,
            callback = vim.lsp.buf.clear_references,
          })
          vim.api.nvim_create_autocmd('LspDetach', {
            group = vim.api.nvim_create_augroup('kickstart-lsp-detach', { clear = true }),
            callback = function(ev)
              vim.lsp.buf.clear_references()
              vim.api.nvim_clear_autocmds { group = 'kickstart-lsp-highlight', buffer = ev.buf }
            end,
          })
        end

        if client and client_supports_method(client, vim.lsp.protocol.Methods.textDocument_inlayHint, event.buf) then
          map('<leader>th', function()
            vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled { bufnr = event.buf })
          end, '[T]oggle Petunjuk [H]alus')
        end
      end,
    })

    -- Konfigurasi Diagnostik
    vim.diagnostic.config {
      severity_sort = true,
      signs = {
        text = {
          [vim.diagnostic.severity.ERROR] = '󰅚 ',
          [vim.diagnostic.severity.WARN] = '󰀪 ',
          [vim.diagnostic.severity.INFO] = '󰋽 ',
          [vim.diagnostic.severity.HINT] = '󰌶 ',
        },
      },
    }

    -- Dapatkan kemampuan tambahan dari blink.cmp
    local capabilities = require('blink.cmp').get_lsp_capabilities()

    -- Daftar server LSP yang ingin diaktifkan
    local servers = {
      biome = {
        cmd = { 'biome', 'lsp-proxy' },
        filetypes = {
          'astro',
          'css',
          'graphql',
          'javascript',
          'javascriptreact',
          'json',
          'jsonc',
          'svelte',
          'typescript',
          'typescript.tsx',
          'typescriptreact',
        },
        root_dir = require('lspconfig.util').root_pattern('biome.json', 'biome.jsonc', '.git'),
      },
      vtsls = {
        cmd = { 'vtsls', '--stdio' },
        filetypes = {
          'javascript',
          'javascriptreact',
          'javascript.jsx',
          'typescript',
          'typescriptreact',
          'typescript.tsx',
        },
        settings = {
          vtsls = {
            experimental = { completion = { enableServerSideFuzzyMatch = true } },
            autoUseWorkspaceTsdk = true,
          },
          typescript = {
            preferences = {
              importModuleSpecifier = 'non-relative',
              importModuleSpecifierEnding = 'auto',
            },
            inlayHints = {
              parameterNames = { enabled = 'all' },
              parameterTypes = { enabled = true },
              variableTypes = { enabled = true },
              propertyDeclarationTypes = { enabled = true },
              functionLikeReturnTypes = true,
              enumMemberValues = { enabled = true },
            },
            suggest = { completeFunctionCalls = true },
            tsserver = { enableTracing = true },
          },
        },
        root_dir = require('lspconfig.util').root_pattern('tsconfig.json', 'package.json', 'jsconfig.json', '.git'),
      },
      lua_ls = {
        settings = {
          Lua = {
            completion = { callSnippet = 'Replace' },
            diagnostics = {
              globals = { 'vim' },
              disable = { 'duplicate-set-field' },
            },
          },
        },
      },
      pyrefly = {
        cmd = { 'pyrefly', 'lsp' },
        filetypes = { 'python' },
      },
    }

    -- Pastikan alat dan LSP terinstal
    local ensure_installed = vim.tbl_keys(servers)
    vim.list_extend(ensure_installed, {})

    require('mason-tool-installer').setup { ensure_installed = ensure_installed }

    -- Setup LSP via mason-lspconfig tanpa menyimpan require('lspconfig') ke variabel
    require('mason-lspconfig').setup {
      automatic_installation = false,
      ensure_installed = {}, -- dikendalikan oleh mason-tool-installer
      handlers = {
        function(server_name)
          local server_opts = servers[server_name] or {}
          server_opts.capabilities = vim.tbl_deep_extend('force', {}, capabilities, server_opts.capabilities or {})
          -- Panggil langsung tanpa menyimpan ke variabel
          require('lspconfig')[server_name].setup(server_opts)
        end,
      },
    }
  end,
}

